//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: calcampose.cpp
//
// MATLAB Coder version            : 2.8
// C/C++ source code generated on  : 22-Jul-2015 17:51:38
//

// Include Files
#include "rt_nonfinite.h"
#include "PnL.h"
#include "R_and_T.h"
#include "calc_PnL.h"
#include "calcampose.h"
#include "norm.h"
#include "det.h"
#include "camParams.h"
#include "mean.h"
#include "calc_PnL_emxutil.h"
#include "power.h"
#include "eye.h"

// Function Definitions

//
// XXc: 3D coordinates in camera frame. Its size is 3 by n.
//  XXw: 3D coordinates in world frame. Its size is 3 by n.
//  R2, t2: the pose of the object in the camera frame.
// Arguments    : const emxArray_real_T *XXc
//                const emxArray_real_T *XXw
//                double R2[9]
//                double t2[3]
// Return Type  : void
//
void b_calcampose(const emxArray_real_T *XXc, const emxArray_real_T *XXw, double
                  R2[9], double t2[3])
{
  emxArray_real_T *K;
  int i14;
  int ixstart;
  int ix;
  int br;
  int ar;
  double ux[3];
  double uy[3];
  emxArray_real_T *y;
  int k;
  unsigned int sz[2];
  int ic;
  int ib;
  int ia;
  emxArray_real_T *x;
  emxArray_real_T *b_y;
  double s;
  emxArray_real_T *b;
  double SXY[9];
  double V[9];
  double b_s[3];
  double U[9];
  double D[9];
  signed char S[9];
  double b_U[9];
  double t;
  double c2;
  double b_R2[3];
  b_emxInit_real_T(&K, 2);

  // B
  // A
  eye((double)XXc->size[1], K);
  i14 = K->size[0] * K->size[1];
  emxEnsureCapacity((emxArray__common *)K, i14, (int)sizeof(double));
  ixstart = K->size[0];
  ix = K->size[1];
  br = XXc->size[1];
  ar = ixstart * ix;
  for (i14 = 0; i14 < ar; i14++) {
    K->data[i14] -= 1.0 / (double)br;
  }

  b_mean(XXw, ux);
  b_mean(XXc, uy);
  b_emxInit_real_T(&y, 2);
  if (K->size[0] == 1) {
    i14 = y->size[0] * y->size[1];
    y->size[0] = 3;
    y->size[1] = K->size[1];
    emxEnsureCapacity((emxArray__common *)y, i14, (int)sizeof(double));
    for (i14 = 0; i14 < 3; i14++) {
      ar = K->size[1];
      for (ixstart = 0; ixstart < ar; ixstart++) {
        y->data[i14 + y->size[0] * ixstart] = 0.0;
        br = XXw->size[1];
        for (ix = 0; ix < br; ix++) {
          y->data[i14 + y->size[0] * ixstart] += XXw->data[i14 + XXw->size[0] *
            ix] * K->data[ix + K->size[0] * ixstart];
        }
      }
    }
  } else {
    k = XXw->size[1];
    sz[1] = (unsigned int)K->size[1];
    i14 = y->size[0] * y->size[1];
    y->size[0] = 3;
    emxEnsureCapacity((emxArray__common *)y, i14, (int)sizeof(double));
    i14 = y->size[0] * y->size[1];
    y->size[1] = (int)sz[1];
    emxEnsureCapacity((emxArray__common *)y, i14, (int)sizeof(double));
    ar = 3 * (int)sz[1];
    for (i14 = 0; i14 < ar; i14++) {
      y->data[i14] = 0.0;
    }

    if (K->size[1] == 0) {
    } else {
      ixstart = 3 * (K->size[1] - 1);
      for (ix = 0; ix <= ixstart; ix += 3) {
        for (ic = ix; ic + 1 <= ix + 3; ic++) {
          y->data[ic] = 0.0;
        }
      }

      br = 0;
      for (ix = 0; ix <= ixstart; ix += 3) {
        ar = 0;
        i14 = br + k;
        for (ib = br; ib + 1 <= i14; ib++) {
          if (K->data[ib] != 0.0) {
            ia = ar;
            for (ic = ix; ic + 1 <= ix + 3; ic++) {
              ia++;
              y->data[ic] += K->data[ib] * XXw->data[ia - 1];
            }
          }

          ar += 3;
        }

        br += k;
      }
    }
  }

  b_emxInit_real_T(&x, 2);
  power(y, x);
  for (i14 = 0; i14 < 2; i14++) {
    sz[i14] = (unsigned int)x->size[i14];
  }

  b_emxInit_real_T(&b_y, 2);
  i14 = b_y->size[0] * b_y->size[1];
  b_y->size[0] = 1;
  b_y->size[1] = (int)sz[1];
  emxEnsureCapacity((emxArray__common *)b_y, i14, (int)sizeof(double));
  if (x->size[1] == 0) {
    i14 = b_y->size[0] * b_y->size[1];
    b_y->size[0] = 1;
    emxEnsureCapacity((emxArray__common *)b_y, i14, (int)sizeof(double));
    i14 = b_y->size[0] * b_y->size[1];
    b_y->size[1] = (int)sz[1];
    emxEnsureCapacity((emxArray__common *)b_y, i14, (int)sizeof(double));
    ar = (int)sz[1];
    for (i14 = 0; i14 < ar; i14++) {
      b_y->data[i14] = 0.0;
    }
  } else {
    ix = 0;
    br = -1;
    for (ar = 1; ar <= x->size[1]; ar++) {
      ixstart = ix;
      ix++;
      s = x->data[ixstart];
      for (k = 0; k < 2; k++) {
        ix++;
        s += x->data[ix - 1];
      }

      br++;
      b_y->data[br] = s;
    }
  }

  emxFree_real_T(&x);
  if (b_y->size[1] == 0) {
    s = 0.0;
  } else {
    s = b_y->data[0];
    for (k = 2; k <= b_y->size[1]; k++) {
      s += b_y->data[k - 1];
    }
  }

  if (K->size[0] == 1) {
    i14 = y->size[0] * y->size[1];
    y->size[0] = 3;
    y->size[1] = K->size[1];
    emxEnsureCapacity((emxArray__common *)y, i14, (int)sizeof(double));
    for (i14 = 0; i14 < 3; i14++) {
      ar = K->size[1];
      for (ixstart = 0; ixstart < ar; ixstart++) {
        y->data[i14 + y->size[0] * ixstart] = 0.0;
        br = XXc->size[1];
        for (ix = 0; ix < br; ix++) {
          y->data[i14 + y->size[0] * ixstart] += XXc->data[i14 + XXc->size[0] *
            ix] * K->data[ix + K->size[0] * ixstart];
        }
      }
    }
  } else {
    k = XXc->size[1];
    sz[1] = (unsigned int)K->size[1];
    i14 = y->size[0] * y->size[1];
    y->size[0] = 3;
    emxEnsureCapacity((emxArray__common *)y, i14, (int)sizeof(double));
    i14 = y->size[0] * y->size[1];
    y->size[1] = (int)sz[1];
    emxEnsureCapacity((emxArray__common *)y, i14, (int)sizeof(double));
    ar = 3 * (int)sz[1];
    for (i14 = 0; i14 < ar; i14++) {
      y->data[i14] = 0.0;
    }

    if (K->size[1] == 0) {
    } else {
      ixstart = 3 * (K->size[1] - 1);
      for (ix = 0; ix <= ixstart; ix += 3) {
        for (ic = ix; ic + 1 <= ix + 3; ic++) {
          y->data[ic] = 0.0;
        }
      }

      br = 0;
      for (ix = 0; ix <= ixstart; ix += 3) {
        ar = 0;
        i14 = br + k;
        for (ib = br; ib + 1 <= i14; ib++) {
          if (K->data[ib] != 0.0) {
            ia = ar;
            for (ic = ix; ic + 1 <= ix + 3; ic++) {
              ia++;
              y->data[ic] += K->data[ib] * XXc->data[ia - 1];
            }
          }

          ar += 3;
        }

        br += k;
      }
    }
  }

  emxFree_real_T(&K);
  b_emxInit_real_T(&b, 2);
  i14 = b->size[0] * b->size[1];
  b->size[0] = XXw->size[1];
  b->size[1] = 3;
  emxEnsureCapacity((emxArray__common *)b, i14, (int)sizeof(double));
  for (i14 = 0; i14 < 3; i14++) {
    ar = XXw->size[1];
    for (ixstart = 0; ixstart < ar; ixstart++) {
      b->data[ixstart + b->size[0] * i14] = XXw->data[i14 + XXw->size[0] *
        ixstart];
    }
  }

  if (y->size[1] == 1) {
    for (i14 = 0; i14 < 3; i14++) {
      for (ixstart = 0; ixstart < 3; ixstart++) {
        SXY[i14 + 3 * ixstart] = 0.0;
        ar = y->size[1];
        for (ix = 0; ix < ar; ix++) {
          SXY[i14 + 3 * ixstart] += y->data[i14 + y->size[0] * ix] * b->data[ix
            + b->size[0] * ixstart];
        }
      }
    }
  } else {
    k = y->size[1];
    memset(&SXY[0], 0, 9U * sizeof(double));
    for (ix = 0; ix < 8; ix += 3) {
      for (ic = ix; ic + 1 <= ix + 3; ic++) {
        SXY[ic] = 0.0;
      }
    }

    br = 0;
    for (ix = 0; ix < 8; ix += 3) {
      ar = 0;
      i14 = br + k;
      for (ib = br; ib + 1 <= i14; ib++) {
        if (b->data[ib] != 0.0) {
          ia = ar;
          for (ic = ix; ic + 1 <= ix + 3; ic++) {
            ia++;
            SXY[ic] += b->data[ib] * y->data[ia - 1];
          }
        }

        ar += 3;
      }

      br += k;
    }
  }

  emxFree_real_T(&b);
  emxFree_real_T(&y);
  br = XXc->size[1];
  for (i14 = 0; i14 < 9; i14++) {
    SXY[i14] /= (double)br;
  }

  b_eml_xgesvd(SXY, U, b_s, V);
  memset(&D[0], 0, 9U * sizeof(double));
  for (k = 0; k < 3; k++) {
    D[k + 3 * k] = b_s[k];
  }

  for (i14 = 0; i14 < 9; i14++) {
    S[i14] = 0;
  }

  for (k = 0; k < 3; k++) {
    S[k + 3 * k] = 1;
  }

  if (det(SXY) < 0.0) {
    S[8] = -1;
  }

  t = 0.0;
  for (i14 = 0; i14 < 3; i14++) {
    for (ixstart = 0; ixstart < 3; ixstart++) {
      b_U[i14 + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 3; ix++) {
        b_U[i14 + 3 * ixstart] += U[i14 + 3 * ix] * (double)S[ix + 3 * ixstart];
      }
    }

    for (ixstart = 0; ixstart < 3; ixstart++) {
      R2[i14 + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 3; ix++) {
        R2[i14 + 3 * ixstart] += b_U[i14 + 3 * ix] * V[ixstart + 3 * ix];
      }

      SXY[i14 + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 3; ix++) {
        SXY[i14 + 3 * ixstart] += D[i14 + 3 * ix] * (double)S[ix + 3 * ixstart];
      }
    }

    t += SXY[i14 + 3 * i14];
  }

  c2 = t / (s / (double)b_y->size[1]);
  emxFree_real_T(&b_y);
  for (i14 = 0; i14 < 3; i14++) {
    s = 0.0;
    for (ixstart = 0; ixstart < 3; ixstart++) {
      s += c2 * R2[i14 + 3 * ixstart] * ux[ixstart];
    }

    t2[i14] = uy[i14] - s;
  }

  b_R2[0] = R2[1] * R2[5] - R2[2] * R2[4];
  b_R2[1] = R2[2] * R2[3] - R2[0] * R2[5];
  b_R2[2] = R2[0] * R2[4] - R2[1] * R2[3];
  for (i14 = 0; i14 < 3; i14++) {
    b_s[i14] = b_R2[i14] - R2[6 + i14];
  }

  if (norm(b_s) > 0.02) {
    for (i14 = 0; i14 < 3; i14++) {
      R2[6 + i14] = -R2[6 + i14];
    }
  }
}

//
// XXc: 3D coordinates in camera frame. Its size is 3 by n.
//  XXw: 3D coordinates in world frame. Its size is 3 by n.
//  R2, t2: the pose of the object in the camera frame.
// Arguments    : const double XXc[72]
//                const double XXw[72]
//                double R2[9]
//                double t2[3]
// Return Type  : void
//
void calcampose(const double XXc[72], const double XXw[72], double R2[9], double
                t2[3])
{
  double ux[3];
  double uy[3];
  int k;
  int ixstart;
  double y[72];
  int ix;
  static const double b[576] = { 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, 0.95833333333333337, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, 0.95833333333333337,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    -0.041666666666666664, -0.041666666666666664, -0.041666666666666664,
    0.95833333333333337 };

  double b_y[72];
  double c_y[24];
  int iy;
  int i;
  double s;
  double d_y;
  double SXY[9];
  double V[9];
  double b_s[3];
  double U[9];
  double D[9];
  signed char S[9];
  double b_U[9];
  double c2;
  double b_R2[3];

  // B
  // A
  mean(XXw, ux);
  mean(XXc, uy);
  for (k = 0; k < 3; k++) {
    for (ixstart = 0; ixstart < 24; ixstart++) {
      y[k + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 24; ix++) {
        y[k + 3 * ixstart] += XXw[k + 3 * ix] * b[ix + 24 * ixstart];
      }
    }
  }

  for (k = 0; k < 72; k++) {
    b_y[k] = y[k] * y[k];
  }

  ix = 0;
  iy = -1;
  for (i = 0; i < 24; i++) {
    ixstart = ix;
    ix++;
    s = b_y[ixstart];
    for (k = 0; k < 2; k++) {
      ix++;
      s += b_y[ix - 1];
    }

    iy++;
    c_y[iy] = s;
  }

  d_y = c_y[0];
  for (k = 0; k < 23; k++) {
    d_y += c_y[k + 1];
  }

  for (k = 0; k < 3; k++) {
    for (ixstart = 0; ixstart < 24; ixstart++) {
      b_y[k + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 24; ix++) {
        b_y[k + 3 * ixstart] += XXc[k + 3 * ix] * b[ix + 24 * ixstart];
      }
    }
  }

  for (k = 0; k < 3; k++) {
    for (ixstart = 0; ixstart < 3; ixstart++) {
      s = 0.0;
      for (ix = 0; ix < 24; ix++) {
        s += b_y[k + 3 * ix] * XXw[ixstart + 3 * ix];
      }

      SXY[k + 3 * ixstart] = s / 24.0;
    }
  }

  b_eml_xgesvd(SXY, U, b_s, V);
  memset(&D[0], 0, 9U * sizeof(double));
  for (k = 0; k < 3; k++) {
    D[k + 3 * k] = b_s[k];
  }

  for (k = 0; k < 9; k++) {
    S[k] = 0;
  }

  for (k = 0; k < 3; k++) {
    S[k + 3 * k] = 1;
  }

  if (det(SXY) < 0.0) {
    S[8] = -1;
  }

  s = 0.0;
  for (k = 0; k < 3; k++) {
    for (ixstart = 0; ixstart < 3; ixstart++) {
      b_U[k + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 3; ix++) {
        b_U[k + 3 * ixstart] += U[k + 3 * ix] * (double)S[ix + 3 * ixstart];
      }
    }

    for (ixstart = 0; ixstart < 3; ixstart++) {
      R2[k + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 3; ix++) {
        R2[k + 3 * ixstart] += b_U[k + 3 * ix] * V[ixstart + 3 * ix];
      }

      SXY[k + 3 * ixstart] = 0.0;
      for (ix = 0; ix < 3; ix++) {
        SXY[k + 3 * ixstart] += D[k + 3 * ix] * (double)S[ix + 3 * ixstart];
      }
    }

    s += SXY[k + 3 * k];
  }

  c2 = s / (d_y / 24.0);
  for (k = 0; k < 3; k++) {
    s = 0.0;
    for (ixstart = 0; ixstart < 3; ixstart++) {
      s += c2 * R2[k + 3 * ixstart] * ux[ixstart];
    }

    t2[k] = uy[k] - s;
  }

  b_R2[0] = R2[1] * R2[5] - R2[2] * R2[4];
  b_R2[1] = R2[2] * R2[3] - R2[0] * R2[5];
  b_R2[2] = R2[0] * R2[4] - R2[1] * R2[3];
  for (k = 0; k < 3; k++) {
    b_s[k] = b_R2[k] - R2[6 + k];
  }

  if (norm(b_s) > 0.02) {
    for (k = 0; k < 3; k++) {
      R2[6 + k] = -R2[6 + k];
    }
  }
}

//
// File trailer for calcampose.cpp
//
// [EOF]
//
