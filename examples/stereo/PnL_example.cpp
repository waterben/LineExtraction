#include <iostream>
#include <fstream>
#include <string>

//#include <lsd/primal_lsd.hpp>
//#include <lsd/cv_lsd.hpp>
//#include <lsd/lsd_cc.hpp>
//#include <lsd/fast_lsd.hpp>
//#include <opencv2/core/core.hpp>
//#include <line_tracker/line_analyzer.hpp>
#include <line_tracker/stereo_line_analyzer.hpp>
#include <stereo/stereo_matcher.hpp>

#include <opencv2/highgui/highgui.hpp>
//#include <opencv2/imgproc/imgproc.hpp>
//#include "opencv2/calib3d/calib3d.hpp"

#include <calc_PnL/PnL.h>
#include <calc_PnL/calc_PnL.h>
#include <calc_PnL/calc_PnL_types.h>
#include <calc_PnL/calc_PnL_emxAPI.h>

using namespace std;
using namespace lsfm;


int main(int argc, char** argv)
{
    int i = 0;
    double xe[36];
    xe[i] = 0.150952380952381;
    xe[++i] = -0.0685714285714286;
    xe[++i] = 1;
    xe[++i] = -0.130952380952381;
    xe[++i] = -0.0830952380952381;
    xe[++i] = 1;
    xe[++i] = -0.000952380952380952;
    xe[++i] = 0.165238095238095;
    xe[++i] = 1;
    xe[++i] = 0.00119047619047619;
    xe[++i] = -0.154761904761905;
    xe[++i] = 1;
    xe[++i] = -0.130952380952381;
    xe[++i] = -0.0830952380952381;
    xe[++i] = 1;
    xe[++i] = -0.130952380952381;
    xe[++i] = -0.0830952380952381;
    xe[++i] = 1;
    xe[++i] = -0.000952380952380952;
    xe[++i] = 0.165238095238095;
    xe[++i] = 1;
    xe[++i] = -0.000952380952380952;
    xe[++i] = 0.165238095238095;
    xe[++i] = 1;
    xe[++i] = 0.150952380952381;
    xe[++i] = -0.0685714285714286;
    xe[++i] = 1;
    xe[++i] = 0.150952380952381;
    xe[++i] = -0.0685714285714286;
    xe[++i] = 1;
    xe[++i] = -0.138095238095238;
    xe[++i] = 0.0616666666666667;
    xe[++i] = 1;
    xe[++i] = 0.111666666666667;
    xe[++i] = 0.0695238095238095;
    xe[++i] = 1;

    i=0;
    double xs[36];
    xs[i] = 0.0273809523809524;
    xs[++i] = 0.0221428571428571;
    xs[++i] = 1;
    xs[++i] = -0.138095238095238;
    xs[++i] = 0.0616666666666667;
    xs[++i] = 1;
    xs[++i] = 0.111666666666667;
    xs[++i] = 0.0695238095238095;
    xs[++i] = 1;
    xs[++i] = -0.0192857142857143;
    xs[++i] = -0.0169047619047619;
    xs[++i] = 1;
    xs[++i] = 0.00119047619047619;
    xs[++i] = -0.154761904761905;
    xs[++i] = 1;
    xs[++i] = 0.0273809523809524;
    xs[++i] = 0.0221428571428571;
    xs[++i] = 1;
    xs[++i] = 0.0273809523809524;
    xs[++i] = 0.0221428571428571;
    xs[++i] = 1;
    xs[++i] = -0.138095238095238;
    xs[++i] = 0.0616666666666667;
    xs[++i] = 1;
    xs[++i] = 0.111666666666667;
    xs[++i] = 0.0695238095238095;
    xs[++i] = 1;
    xs[++i] = 0.00119047619047619;
    xs[++i] = -0.154761904761905;
    xs[++i] = 1;
    xs[++i] = -0.0192857142857143;
    xs[++i] = -0.0169047619047619;
    xs[++i] = 1;
    xs[++i] = -0.0192857142857143;
    xs[++i] = -0.0169047619047619;
    xs[++i] = 1;

    i=0;
    double V[36];
    V[i] = 0.185889921656709;
    V[++i] = 0.703279703602831;
    V[++i] = -0.686179710809622;
    V[++i] = 0.748454854968175;
    V[++i] = -0.553804892686467;
    V[++i] = -0.364849929301212;
    V[++i] = -0.185889921656709;
    V[++i] = -0.703279703602831;
    V[++i] = 0.686179710809622;
    V[++i] = 0.748458999943987;
    V[++i] = -0.553797959628809;
    V[++i] = -0.364851949856122;
    V[++i] = -0.185888614335667;
    V[++i] = -0.703284757523971;
    V[++i] = 0.686174885065618;
    V[++i] = -0.636602737374657;
    V[++i] = -0.445753415694882;
    V[++i] = -0.629317763267048;
    V[++i] = -0.748454854968175;
    V[++i] = 0.553804892686467;
    V[++i] = 0.364849929301212;
    V[++i] = 0.636602737374657;
    V[++i] = 0.445753415694882;
    V[++i] = 0.629317763267048;
    V[++i] = 0.748454854968175;
    V[++i] = -0.553804892686467;
    V[++i] = -0.364849929301212;
    V[++i] = 0.636605575030161;
    V[++i] = 0.445745402630860;
    V[++i] = 0.629320568449793;
    V[++i] = -0.185889921656709;
    V[++i] = -0.703279703602831;
    V[++i] = 0.686179710809622;
    V[++i] = 0.636602737374657;
    V[++i] = 0.445753415694882;
    V[++i] = 0.629317763267048;

    i=0;
    double P[36];
    P[i] = 1.39917000000000;
    P[++i] = -0.811330000000000;
    P[++i] = 3.15065000000000;
    P[++i] = -1.37095000000000;
    P[++i] = -0.595230000000000;
    P[++i] = 2.62171000000000;
    P[++i] = 0.274040000000000;
    P[++i] = 1.70284000000000;
    P[++i] = 2.50799000000000;
    P[++i] = -0.999170000000000;
    P[++i] = 0.811330000000000;
    P[++i] = 1.24935000000000;
    P[++i] = 0.497740000000000;
    P[++i] = -0.296260000000000;
    P[++i] = 0.519650000000000;
    P[++i] = 1.39917000000000;
    P[++i] = -0.811330000000000;
    P[++i] = 3.15065000000000;
    P[++i] = 1.39917000000000;
    P[++i] = -0.811330000000000;
    P[++i] = 3.15065000000000;
    P[++i] = -1.37095000000000;
    P[++i] = -0.595230000000000;
    P[++i] = 2.62171000000000;
    P[++i] = 0.274040000000000;
    P[++i] = 1.70284000000000;
    P[++i] = 2.50799000000000;
    P[++i] = 0.497740000000000;
    P[++i] = -0.296260000000000;
    P[++i] = 0.519650000000000;
    P[++i] = -0.999170000000000;
    P[++i] = 0.811330000000000;
    P[++i] = 1.24935000000000;
    P[++i] = -0.999170000000000;
    P[++i] = 0.811330000000000;
    P[++i] = 1.24935000000000;

    emxArray_real_T * xew = emxCreateWrapper_real_T(&xe[0],3,12);
    emxArray_real_T * xsw = emxCreateWrapper_real_T(&xs[0],3,12);
    emxArray_real_T * Vw = emxCreateWrapper_real_T(&V[0],3,12);
    emxArray_real_T * Pw = emxCreateWrapper_real_T(&P[0],3,12);

    double rot_cw_data[9];
    int rot_cw_size[2];
    double pos_cw_data[3];
    double minimalReprojectionError;

    PnL(xsw,  xew,  Vw,  Pw, true, rot_cw_data, rot_cw_size, pos_cw_data, &minimalReprojectionError);

    for(int i = 0; i <= 6; i=i+3)
        std::cout << rot_cw_data[i]  << "  " << rot_cw_data[i+1] << "  " << rot_cw_data[i+2] << std::endl;
    std::cout << "pos " << std::endl << pos_cw_data[0] << std::endl << pos_cw_data[1] << std::endl << pos_cw_data[2] << std::endl;

    return 0;

}
